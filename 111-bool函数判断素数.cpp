# include <stdio.h>

bool sushu(int val)            //bool函数的特点就是他的执行结果只有true和false，也就是只能为真或者假 
{								//这里判断素数的方法就是让他与2到输入值的数字相除，如果能被其中的某个数字除尽，那么他就不是素数 
	int i;					  //因为素数除了能被1整除外，不能被其他比他小的数字整除，因此，只要那个数字不被比他小的任何一个数字整除，他就是素数 
	for(i=2; i<val; i++)		//举个例子，比如9，那么2-9之间的数字有8个，要用9分别除这八个数字，即9/2，9/3，9/4，9/5.... 
	{							//可以看到，当9/3的时候就已经被整除了，那么9就不是素数 
		if(val%i == 0)			//如果输入5，那么就让5/2，5/3，5/4，5/5，可以看到，直到5/5他才被整除，但5是和这个数字一样大的，所以他也是素数 
			break;				//这个函数就是靠这个特性设计的，第八行中只要输入值被一个比他小的数字（非1）整除了，就可以终止循环了 
		else					//但这个时候还不能马上判断，因为for循环中的那个数字最后是一定会被整除的，而整除他的那个数字 
			continue;			//可能是一个比他小的数字，也可能是他本身，比如5最后就是被自己本身整除的，比如9就是半路被3整除的 
	}							//因此最后第13行要加个if语句加以判断，如果是被自己本身整除的话，那么for循环就已经运行到最后了 
	if(i == val)				//由于是val/i，如果是被自己整除的话那么val一定是等于i的，因此如果被自己整除（即i=val），就是个素数，反之则不是 
		return true;
	else						//注意：由于第26行那里，我对素数和非素数都进行了后续处理，所以这里不能直接输出这个数字是不是素数 
		return false;           //要把这个数字返还给主函数加以处理 
} 

int main(void)
{
	int val; 
	
	scanf("%d", &val);
	if(sushu(val))         //这里的if就是判断真假，这个bool函数的执行结果只有true和false，如果是if（ture）就会执行，如果是if（false）就不会执行 
	{
		val++;
		printf("%d", val);
	}
	else
	{
		val--;
		printf("%d", val);
	}
		
	
	return 0;
}

//当定义函数的时候，函数名后面的括号是直接使用主函数中的变量还是自己定义个中间变量的问题
//结论：当主函数中的变量是由用户使用scanf输入的时候，直接使用主函数变量，当主函数中的变量是定义直接赋值的时候，需要定义中间变量
//比如当主函数的变量val是使用scanf赋值的时候，自定义的函数可以写成 bool sushu（int val）
//当主函数变量val是使用int val=66，即已经被赋值的时候，自定义函数写成 bool sushu（int i）
//原因，当变量是直接定义赋值的时候，由于函数是通用的，他还要使用到别的变量上去，所以如果你写成 bool sushu（int val），
//那么主函数中的其他变量就无法使用这个函数，因为这个函数只对val这一个变量有效，但如果你写成 bool sushu（int i），那么其他变量要使用这个函数
//只需要写sushu（a），即让a执行sushu这个函数
//当变量是由scanf输入的时候，这个变量本身就可以是任何数字了，函数只需要对一个变量有效就行， 
